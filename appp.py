import re
import telebot
from telebot import types
import sqlite3
import requests
import json
from datetime import datetime

API_TOKEN = '7216690383:AAGPtNiQ_F2Bsa1rdC_sVT8lhic7ghjS6Fo'
ADMIN_BOT_API_TOKEN = '8191961162:AAGo_BkBhLTY7VbgMJ5DTeih5wBBq_l71mE'
ADMIN_BOT_CHAT_ID = '5338389700'
API_URL = "https://south-cargo-osh.prolabagency.com/api/v1/clients/"

bot = telebot.TeleBot(API_TOKEN)
admin_bot = telebot.TeleBot(ADMIN_BOT_API_TOKEN)


conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    name TEXT,
    phone TEXT,
    code TEXT,
    registration_date TEXT
)
''')
conn.commit()

user_data = {}

def log_event(event):
    print(event)  


def send_data_to_api(user_id, user_data, bot, chat_id):
    try:
        if not API_URL or not API_URL.startswith("http"):
            log_event("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π API_URL.")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        headers = {"Content-Type": "application/json"}
        if API_TOKEN:
            headers["Authorization"] = f"Bearer {API_TOKEN}"

        response = requests.post(API_URL, json=user_data, headers=headers, timeout=10)
        
        if response.status_code == 201:
            bot.send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            return True
        else:
            error_message = response.json().get("wa_number", ["‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."])[0]
            bot.send_message(chat_id, f"‚ùå {error_message}")
            return False

    except requests.exceptions.RequestException as e:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        log_event(f"–û—à–∏–±–∫–∞ API: {e}")
 



@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = get_user(message.chat.id)
    if not user:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)
    else:
        send_main_menu(message)


def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()


def send_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ê–∫–∫–∞—É–Ω—Ç', '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã','–ö–∞–Ω–∞–ª',)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

def get_user(user_id):
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    if user:
        return {
            'user_id': user[1],
            'name': user[2],
            'phone': user[3],
            'code': user[4],
            'registration_date': user[5]
        }
    return None

@bot.message_handler(func=lambda message: message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
def registration(message):
    try:
        user = get_user(message.chat.id)
        if user:
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            send_main_menu(message)
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–û—Ç–º–µ–Ω–∞')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_name_step)
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def process_name_step(message):
    try:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
            return
        user_data[message.chat.id] = {'name': message.text}
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–∞—Ç—Å–∞–ø –Ω–æ–º–µ—Ä (–ø—Ä–∏–º–µ—Ä: +996559708005):")
        bot.register_next_step_handler(msg, process_phone_step)
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏: {e}")

def process_phone_step(message):
    try:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
            return
        
        phone = message.text.strip()
        if not re.match(r'^\+\d{10,15}$', phone):
            msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–ø—Ä–∏–º–µ—Ä: +996559708005):")
            bot.register_next_step_handler(msg, process_phone_step)
            return

        user_data[message.chat.id]['phone'] = phone
        complete_registration(message)
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")


def complete_registration(message):
    try:
        user_id = message.chat.id

        if user_id not in user_data:
            bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞: –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.")
            return

        name = user_data[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        phone = user_data[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')

        cursor.execute('SELECT code FROM users WHERE user_id = ?', (user_id,))
        existing_user = cursor.fetchone()
        if existing_user:
            bot.send_message(user_id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            send_main_menu(message)
            return

        cursor.execute('SELECT COUNT(*) FROM users')
        user_count = cursor.fetchone()[0]
        START_CODE = 3020
        user_code = f"X{START_CODE + user_count + 1}"
        registration_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        user_data[user_id]['code'] = user_code
        user_data[user_id]['registration_date'] = registration_date

        res = send_data_to_api(user_id, {"id": user_id, "name": name, "code": user_code, "wa_number": phone}, bot, user_id)

        if res:
            cursor.execute('INSERT INTO users (user_id, name, phone, code, registration_date) VALUES (?, ?, ?, ?, ?)',
                       (user_id, name, phone, user_code, registration_date))
            conn.commit()

            send_admin_notification(user_data[user_id])

        

            bot.send_message(user_id, f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                                    f"üìå *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n"
                                    f"üîπ *–ò–º—è:* {name}\n"
                                    f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
                                    f"üÜî *–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:* {user_code}\n"
                                    f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {registration_date}",
                            parse_mode="Markdown")

            address_message = (
                "Âπø‰∏úÁúÅ‰ΩõÂ±±Â∏ÇÂçóÊµ∑Âå∫ÈáåÊ∞¥ÈïáÂíåÈ°∫Èπ§Â≥∞1Âè∑‰ªì315Â∫ìB6961\n"
                "Êî∂Ë¥ß‰∫∫ Ê¢ÖÂÖàÁîü \n"
                "13250150777"
            )
            bot.send_message(user_id, address_message, parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            video_paths = ['instruction.mp4', 'instructions.mp4']
            for path in video_paths:
                try:
                    with open(path, 'rb') as video:
                        bot.send_video(user_id, video)
                except FileNotFoundError:
                    bot.send_message(user_id, f"‚ö† –í–∏–¥–µ–æ {path} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

            bot.send_message(user_id, "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!")
            send_main_menu(message)

    except sqlite3.Error as db_error:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        log_event(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {db_error}")
    except requests.exceptions.RequestException as api_error:
        bot.send_message(user_id, "‚ö† –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –î–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        log_event(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {api_error}")
    except Exception as e:
        log_event(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def send_admin_notification(user_data):
    try:
        admin_message = (
            f"üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
            f"üë§ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('wa_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üîë –ö–æ–¥: {user_data.get('code', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.get('registration_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
        )
        admin_bot.send_message(ADMIN_BOT_CHAT_ID, admin_message)
        log_event("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        log_event(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@bot.message_handler(func=lambda message: message.text == '–ê–∫–∫–∞—É–Ω—Ç')
def account_info(message):
    try:
        user = get_user(message.chat.id)
        if user:
            bot.send_message(
                message.chat.id,
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n"
                f"–ò–º—è: {user['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                f"–ö–æ–¥: {user['code']}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date']}"
            )
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")


@bot.message_handler(func=lambda message: message.text == '–ö–∞–Ω–∞–ª')
def send_channel_links(message):
    try:
        bot.send_message(
            message.chat.id,
            "–°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n"
            "1. [Telegram –∫–∞–Ω–∞–ª](https://t.me/+N1Xktz9wb55jZjRi)\n"
            "2. [–û—Ç–∑—ã–≤—ã](https://web.telegram.org/k/#-2069386995)\n\n"
            "–î–ª—è —Å–≤—è–∑–∏: [–õ–∏—á–∫–∞](https://t.me/Seocargo)",
            "–î–ª—è —Å–≤—è–∑–∏: [–õ–∏—á–∫–∞](https://wa.me/message/ADWEXABNRF74I1)",
            parse_mode="Markdown"
        )
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã: {e}")


@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã')
def send_prohibited_items(message):
    try:
        image_paths = [f"{i}.png" for i in range(1, 11)]
        for path in image_paths:
            try:
                with open(path, 'rb') as image:
                    bot.send_photo(message.chat.id, image)
            except FileNotFoundError:
                bot.send_message(message.chat.id, f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {path} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")


if __name__ == '__main__':
    try:
        bot.infinity_polling()
    except Exception as e:
        log_event(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
