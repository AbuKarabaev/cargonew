import telebot
from telebot import types
import sqlite3
import re
from datetime import datetime

API_TOKEN = '7216690383:AAGPtNiQ_F2Bsa1rdC_sVT8lhic7ghjS6Fo'
ADMIN_BOT_API_TOKEN = '8191961162:AAGo_BkBhLTY7VbgMJ5DTeih5wBBq_l71mE'
ADMIN_BOT_CHAT_ID = '5338389700'

bot = telebot.TeleBot(API_TOKEN)
admin_bot = telebot.TeleBot(ADMIN_BOT_API_TOKEN)

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    name TEXT,
    phone TEXT,
    code TEXT,
    registration_date TEXT
)
''')
conn.commit()

user_data = {}

def log_event(event):
    with open('bot_logs.txt', 'a', encoding='utf-8') as log_file:
        log_file.write(f"{datetime.now()} - {event}\n")

def send_admin_notification(user_data):
    try:
        admin_message = (
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"–ö–æ–¥: {user_data['code']}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['registration_date']}"
        )
        admin_bot.send_message(ADMIN_BOT_CHAT_ID, admin_message)
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = get_user(message.chat.id)
    if not user:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)
    else:
        send_main_menu(message)

def send_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ê–∫–∫–∞—É–Ω—Ç', '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', '–ê–¥—Ä–µ—Å –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ', '–ö–∞–Ω–∞–ª', '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

def get_user(user_id):
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    if user:
        return {
            'user_id': user[1],
            'name': user[2],
            'phone': user[3],
            'code': user[4],
            'registration_date': user[5]
        }
    return None

@bot.message_handler(func=lambda message: message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
def registration(message):
    try:
        user = get_user(message.chat.id)
        if user:
            bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            send_main_menu(message)
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–û—Ç–º–µ–Ω–∞')
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_name_step)
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def process_name_step(message):
    try:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
            return
        user_data[message.chat.id] = {'name': message.text}
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +996559708005):")
        bot.register_next_step_handler(msg, process_phone_step)
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏: {e}")

def process_phone_step(message):
    try:
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
            return
        
        phone = message.text.strip()
        if not re.match(r'^\+\d{10,15}$', phone):
            msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–ø—Ä–∏–º–µ—Ä: +996559708005):")
            bot.register_next_step_handler(msg, process_phone_step)
            return

        user_data[message.chat.id]['phone'] = phone
        complete_registration(message)
    except Exception as e:
        log_event(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")

def complete_registration(message):
    try:
        user_id = message.chat.id
        name = user_data[user_id]['name']
        phone = user_data[user_id]['phone']

        cursor.execute('SELECT COUNT(*) FROM users')
        user_count = cursor.fetchone()[0]
        START_CODE = 3000
        user_code = f"A{START_CODE + user_count}"
        registration_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        cursor.execute('INSERT INTO users (user_id, name, phone, code, registration_date) VALUES (?, ?, ?, ?, ?)',
                       (user_id, name, phone, user_code, registration_date))
        conn.commit()

        user_data[user_id]['code'] = user_code
        user_data[user_id]['registration_date'] = registration_date

        send_admin_notification(user_data[user_id])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(message.chat.id, f"‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                                          f"üìå *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n"
                                          f"üîπ *–ò–º—è:* {name}\n"
                                          f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
                                          f"üÜî *–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:* {user_code}\n"
                                          f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {registration_date}",
                         parse_mode="Markdown")

        address_message = (
            "üì¶ *–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:*\n"
            "Âπø‰∏úÁúÅ‰ΩõÂ±±Â∏ÇÂçóÊµ∑Âå∫ÈáåÊ∞¥ÈïáÁéØÈïáÂçóË∑Ø33Âè∑1Âè∑‰ªì315Â∫ìB6961\n"
            "Êî∂Ë¥ß‰∫∫ Ê¢ÖÂÖàÁîü-B6961\n"
            "üìû 13250150777"
        )
        bot.send_message(message.chat.id, address_message, parse_mode="Markdown")

        video_paths = ['instruction.mp4', 'instructions.mp4']
        for path in video_paths:
            try:
                with open(path, 'rb') as video:
                    bot.send_video(message.chat.id, video)
            except FileNotFoundError:
                bot.send_message(message.chat.id, f"‚ö† –í–∏–¥–µ–æ {path} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

        bot.send_message(message.chat.id, "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!")
        send_main_menu(message)
    except sqlite3.Error as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        log_event(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    except Exception as e:
        log_event(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

if __name__ == '__main__':
    try:
        bot.infinity_polling()
    except Exception as e:
        log_event(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
